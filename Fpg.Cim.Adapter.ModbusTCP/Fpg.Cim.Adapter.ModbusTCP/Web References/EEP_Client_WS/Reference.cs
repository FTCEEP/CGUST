//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.19408
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 原始程式碼已由 Microsoft.VSDesigner 自動產生，版本 4.0.30319.19408。
// 
#pragma warning disable 1591

namespace Fpg.Cim.Adapter.ModbusTCP.EEP_Client_WS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EEP_Client_WSSoap", Namespace="http://tempuri.org/")]
    public partial class EEP_Client_WS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Set_PointValueToHistoryTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback Set_PointValueToRealTimeTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback TransformRealToHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_PointsData_ModbusRTUOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_PointsData_ModbusTCPOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_PointsData_OPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback EEP_Points_DownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback EEP_Points_UploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_AdapterControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback EEP_AdapterStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback EEP_Menu_DownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestNlogOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatekWhOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordingTemperatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_PointsData_MeterParaOperationCompleted;
        
        private System.Threading.SendOrPostCallback WrtieAdapterLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_PointsData_FTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_FTPParameterOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_NewestHistoryDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback FTPOperationTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback FTP_ReworkOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update_EquipmentsStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_EquipmentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Set_SumTagsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Set_AlarmOccurOperationCompleted;
        
        private System.Threading.SendOrPostCallback Del_AlarmOccurOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EEP_Client_WS() {
            this.Url = global::Fpg.Cim.Adapter.ModbusTCP.Properties.Settings.Default.Fpg_Cim_Adapter_ModbusTCP_EEP_Client_WS_EEP_Client_WS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Set_PointValueToHistoryTableCompletedEventHandler Set_PointValueToHistoryTableCompleted;
        
        /// <remarks/>
        public event Set_PointValueToRealTimeTableCompletedEventHandler Set_PointValueToRealTimeTableCompleted;
        
        /// <remarks/>
        public event TransformRealToHistoryCompletedEventHandler TransformRealToHistoryCompleted;
        
        /// <remarks/>
        public event Get_PointsData_ModbusRTUCompletedEventHandler Get_PointsData_ModbusRTUCompleted;
        
        /// <remarks/>
        public event Get_PointsData_ModbusTCPCompletedEventHandler Get_PointsData_ModbusTCPCompleted;
        
        /// <remarks/>
        public event Get_PointsData_OPCCompletedEventHandler Get_PointsData_OPCCompleted;
        
        /// <remarks/>
        public event EEP_Points_DownloadCompletedEventHandler EEP_Points_DownloadCompleted;
        
        /// <remarks/>
        public event EEP_Points_UploadCompletedEventHandler EEP_Points_UploadCompleted;
        
        /// <remarks/>
        public event Insert_AdapterControlCompletedEventHandler Insert_AdapterControlCompleted;
        
        /// <remarks/>
        public event EEP_AdapterStateCompletedEventHandler EEP_AdapterStateCompleted;
        
        /// <remarks/>
        public event EEP_Menu_DownloadCompletedEventHandler EEP_Menu_DownloadCompleted;
        
        /// <remarks/>
        public event TestNlogCompletedEventHandler TestNlogCompleted;
        
        /// <remarks/>
        public event UpdatekWhCompletedEventHandler UpdatekWhCompleted;
        
        /// <remarks/>
        public event RecordingTemperatureCompletedEventHandler RecordingTemperatureCompleted;
        
        /// <remarks/>
        public event Get_PointsData_MeterParaCompletedEventHandler Get_PointsData_MeterParaCompleted;
        
        /// <remarks/>
        public event WrtieAdapterLogsCompletedEventHandler WrtieAdapterLogsCompleted;
        
        /// <remarks/>
        public event Get_PointsData_FTPCompletedEventHandler Get_PointsData_FTPCompleted;
        
        /// <remarks/>
        public event Get_FTPParameterCompletedEventHandler Get_FTPParameterCompleted;
        
        /// <remarks/>
        public event Get_NewestHistoryDataCompletedEventHandler Get_NewestHistoryDataCompleted;
        
        /// <remarks/>
        public event FTPOperationTimeCompletedEventHandler FTPOperationTimeCompleted;
        
        /// <remarks/>
        public event FTP_ReworkCompletedEventHandler FTP_ReworkCompleted;
        
        /// <remarks/>
        public event Update_EquipmentsStateCompletedEventHandler Update_EquipmentsStateCompleted;
        
        /// <remarks/>
        public event Get_EquipmentsCompletedEventHandler Get_EquipmentsCompleted;
        
        /// <remarks/>
        public event Set_SumTagsCompletedEventHandler Set_SumTagsCompleted;
        
        /// <remarks/>
        public event Set_AlarmOccurCompletedEventHandler Set_AlarmOccurCompleted;
        
        /// <remarks/>
        public event Del_AlarmOccurCompletedEventHandler Del_AlarmOccurCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Set_PointValueToHistoryTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Set_PointValueToHistoryTable([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] da, string sProjectID) {
            object[] results = this.Invoke("Set_PointValueToHistoryTable", new object[] {
                        da,
                        sProjectID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Set_PointValueToHistoryTableAsync(byte[] da, string sProjectID) {
            this.Set_PointValueToHistoryTableAsync(da, sProjectID, null);
        }
        
        /// <remarks/>
        public void Set_PointValueToHistoryTableAsync(byte[] da, string sProjectID, object userState) {
            if ((this.Set_PointValueToHistoryTableOperationCompleted == null)) {
                this.Set_PointValueToHistoryTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSet_PointValueToHistoryTableOperationCompleted);
            }
            this.InvokeAsync("Set_PointValueToHistoryTable", new object[] {
                        da,
                        sProjectID}, this.Set_PointValueToHistoryTableOperationCompleted, userState);
        }
        
        private void OnSet_PointValueToHistoryTableOperationCompleted(object arg) {
            if ((this.Set_PointValueToHistoryTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Set_PointValueToHistoryTableCompleted(this, new Set_PointValueToHistoryTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Set_PointValueToRealTimeTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Set_PointValueToRealTimeTable([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] da, string sProjectID) {
            object[] results = this.Invoke("Set_PointValueToRealTimeTable", new object[] {
                        da,
                        sProjectID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Set_PointValueToRealTimeTableAsync(byte[] da, string sProjectID) {
            this.Set_PointValueToRealTimeTableAsync(da, sProjectID, null);
        }
        
        /// <remarks/>
        public void Set_PointValueToRealTimeTableAsync(byte[] da, string sProjectID, object userState) {
            if ((this.Set_PointValueToRealTimeTableOperationCompleted == null)) {
                this.Set_PointValueToRealTimeTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSet_PointValueToRealTimeTableOperationCompleted);
            }
            this.InvokeAsync("Set_PointValueToRealTimeTable", new object[] {
                        da,
                        sProjectID}, this.Set_PointValueToRealTimeTableOperationCompleted, userState);
        }
        
        private void OnSet_PointValueToRealTimeTableOperationCompleted(object arg) {
            if ((this.Set_PointValueToRealTimeTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Set_PointValueToRealTimeTableCompleted(this, new Set_PointValueToRealTimeTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TransformRealToHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TransformRealToHistory(string sProjectID) {
            object[] results = this.Invoke("TransformRealToHistory", new object[] {
                        sProjectID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TransformRealToHistoryAsync(string sProjectID) {
            this.TransformRealToHistoryAsync(sProjectID, null);
        }
        
        /// <remarks/>
        public void TransformRealToHistoryAsync(string sProjectID, object userState) {
            if ((this.TransformRealToHistoryOperationCompleted == null)) {
                this.TransformRealToHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransformRealToHistoryOperationCompleted);
            }
            this.InvokeAsync("TransformRealToHistory", new object[] {
                        sProjectID}, this.TransformRealToHistoryOperationCompleted, userState);
        }
        
        private void OnTransformRealToHistoryOperationCompleted(object arg) {
            if ((this.TransformRealToHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransformRealToHistoryCompleted(this, new TransformRealToHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_PointsData_ModbusRTU", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_PointsData_ModbusRTU(string sCompanyID, string sIP, string sPort) {
            object[] results = this.Invoke("Get_PointsData_ModbusRTU", new object[] {
                        sCompanyID,
                        sIP,
                        sPort});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_PointsData_ModbusRTUAsync(string sCompanyID, string sIP, string sPort) {
            this.Get_PointsData_ModbusRTUAsync(sCompanyID, sIP, sPort, null);
        }
        
        /// <remarks/>
        public void Get_PointsData_ModbusRTUAsync(string sCompanyID, string sIP, string sPort, object userState) {
            if ((this.Get_PointsData_ModbusRTUOperationCompleted == null)) {
                this.Get_PointsData_ModbusRTUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_PointsData_ModbusRTUOperationCompleted);
            }
            this.InvokeAsync("Get_PointsData_ModbusRTU", new object[] {
                        sCompanyID,
                        sIP,
                        sPort}, this.Get_PointsData_ModbusRTUOperationCompleted, userState);
        }
        
        private void OnGet_PointsData_ModbusRTUOperationCompleted(object arg) {
            if ((this.Get_PointsData_ModbusRTUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_PointsData_ModbusRTUCompleted(this, new Get_PointsData_ModbusRTUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_PointsData_ModbusTCP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_PointsData_ModbusTCP(string sCompanyID, string sIP, string sPort) {
            object[] results = this.Invoke("Get_PointsData_ModbusTCP", new object[] {
                        sCompanyID,
                        sIP,
                        sPort});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_PointsData_ModbusTCPAsync(string sCompanyID, string sIP, string sPort) {
            this.Get_PointsData_ModbusTCPAsync(sCompanyID, sIP, sPort, null);
        }
        
        /// <remarks/>
        public void Get_PointsData_ModbusTCPAsync(string sCompanyID, string sIP, string sPort, object userState) {
            if ((this.Get_PointsData_ModbusTCPOperationCompleted == null)) {
                this.Get_PointsData_ModbusTCPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_PointsData_ModbusTCPOperationCompleted);
            }
            this.InvokeAsync("Get_PointsData_ModbusTCP", new object[] {
                        sCompanyID,
                        sIP,
                        sPort}, this.Get_PointsData_ModbusTCPOperationCompleted, userState);
        }
        
        private void OnGet_PointsData_ModbusTCPOperationCompleted(object arg) {
            if ((this.Get_PointsData_ModbusTCPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_PointsData_ModbusTCPCompleted(this, new Get_PointsData_ModbusTCPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_PointsData_OPC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_PointsData_OPC(string sCompanyID) {
            object[] results = this.Invoke("Get_PointsData_OPC", new object[] {
                        sCompanyID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_PointsData_OPCAsync(string sCompanyID) {
            this.Get_PointsData_OPCAsync(sCompanyID, null);
        }
        
        /// <remarks/>
        public void Get_PointsData_OPCAsync(string sCompanyID, object userState) {
            if ((this.Get_PointsData_OPCOperationCompleted == null)) {
                this.Get_PointsData_OPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_PointsData_OPCOperationCompleted);
            }
            this.InvokeAsync("Get_PointsData_OPC", new object[] {
                        sCompanyID}, this.Get_PointsData_OPCOperationCompleted, userState);
        }
        
        private void OnGet_PointsData_OPCOperationCompleted(object arg) {
            if ((this.Get_PointsData_OPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_PointsData_OPCCompleted(this, new Get_PointsData_OPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EEP_Points_Download", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EEP_Points_Download(string sEEP_Client_ID, string sCompanyID, string AdapterType) {
            this.Invoke("EEP_Points_Download", new object[] {
                        sEEP_Client_ID,
                        sCompanyID,
                        AdapterType});
        }
        
        /// <remarks/>
        public void EEP_Points_DownloadAsync(string sEEP_Client_ID, string sCompanyID, string AdapterType) {
            this.EEP_Points_DownloadAsync(sEEP_Client_ID, sCompanyID, AdapterType, null);
        }
        
        /// <remarks/>
        public void EEP_Points_DownloadAsync(string sEEP_Client_ID, string sCompanyID, string AdapterType, object userState) {
            if ((this.EEP_Points_DownloadOperationCompleted == null)) {
                this.EEP_Points_DownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEEP_Points_DownloadOperationCompleted);
            }
            this.InvokeAsync("EEP_Points_Download", new object[] {
                        sEEP_Client_ID,
                        sCompanyID,
                        AdapterType}, this.EEP_Points_DownloadOperationCompleted, userState);
        }
        
        private void OnEEP_Points_DownloadOperationCompleted(object arg) {
            if ((this.EEP_Points_DownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EEP_Points_DownloadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EEP_Points_Upload", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EEP_Points_Upload(string sEEP_Client_ID, string sAdapterType) {
            this.Invoke("EEP_Points_Upload", new object[] {
                        sEEP_Client_ID,
                        sAdapterType});
        }
        
        /// <remarks/>
        public void EEP_Points_UploadAsync(string sEEP_Client_ID, string sAdapterType) {
            this.EEP_Points_UploadAsync(sEEP_Client_ID, sAdapterType, null);
        }
        
        /// <remarks/>
        public void EEP_Points_UploadAsync(string sEEP_Client_ID, string sAdapterType, object userState) {
            if ((this.EEP_Points_UploadOperationCompleted == null)) {
                this.EEP_Points_UploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEEP_Points_UploadOperationCompleted);
            }
            this.InvokeAsync("EEP_Points_Upload", new object[] {
                        sEEP_Client_ID,
                        sAdapterType}, this.EEP_Points_UploadOperationCompleted, userState);
        }
        
        private void OnEEP_Points_UploadOperationCompleted(object arg) {
            if ((this.EEP_Points_UploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EEP_Points_UploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Insert_AdapterControl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_AdapterControl(string sEEP_Client_ID, string sIP, string sAdapter, string sEnable, System.DateTime dtEffectiveDate) {
            object[] results = this.Invoke("Insert_AdapterControl", new object[] {
                        sEEP_Client_ID,
                        sIP,
                        sAdapter,
                        sEnable,
                        dtEffectiveDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_AdapterControlAsync(string sEEP_Client_ID, string sIP, string sAdapter, string sEnable, System.DateTime dtEffectiveDate) {
            this.Insert_AdapterControlAsync(sEEP_Client_ID, sIP, sAdapter, sEnable, dtEffectiveDate, null);
        }
        
        /// <remarks/>
        public void Insert_AdapterControlAsync(string sEEP_Client_ID, string sIP, string sAdapter, string sEnable, System.DateTime dtEffectiveDate, object userState) {
            if ((this.Insert_AdapterControlOperationCompleted == null)) {
                this.Insert_AdapterControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_AdapterControlOperationCompleted);
            }
            this.InvokeAsync("Insert_AdapterControl", new object[] {
                        sEEP_Client_ID,
                        sIP,
                        sAdapter,
                        sEnable,
                        dtEffectiveDate}, this.Insert_AdapterControlOperationCompleted, userState);
        }
        
        private void OnInsert_AdapterControlOperationCompleted(object arg) {
            if ((this.Insert_AdapterControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_AdapterControlCompleted(this, new Insert_AdapterControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EEP_AdapterState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EEP_AdapterState(string sEEP_Client_ID, string sIP, string sAdapter) {
            object[] results = this.Invoke("EEP_AdapterState", new object[] {
                        sEEP_Client_ID,
                        sIP,
                        sAdapter});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EEP_AdapterStateAsync(string sEEP_Client_ID, string sIP, string sAdapter) {
            this.EEP_AdapterStateAsync(sEEP_Client_ID, sIP, sAdapter, null);
        }
        
        /// <remarks/>
        public void EEP_AdapterStateAsync(string sEEP_Client_ID, string sIP, string sAdapter, object userState) {
            if ((this.EEP_AdapterStateOperationCompleted == null)) {
                this.EEP_AdapterStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEEP_AdapterStateOperationCompleted);
            }
            this.InvokeAsync("EEP_AdapterState", new object[] {
                        sEEP_Client_ID,
                        sIP,
                        sAdapter}, this.EEP_AdapterStateOperationCompleted, userState);
        }
        
        private void OnEEP_AdapterStateOperationCompleted(object arg) {
            if ((this.EEP_AdapterStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EEP_AdapterStateCompleted(this, new EEP_AdapterStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EEP_Menu_Download", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EEP_Menu_Download(string sEEP_Client_ID, string sProjectID) {
            this.Invoke("EEP_Menu_Download", new object[] {
                        sEEP_Client_ID,
                        sProjectID});
        }
        
        /// <remarks/>
        public void EEP_Menu_DownloadAsync(string sEEP_Client_ID, string sProjectID) {
            this.EEP_Menu_DownloadAsync(sEEP_Client_ID, sProjectID, null);
        }
        
        /// <remarks/>
        public void EEP_Menu_DownloadAsync(string sEEP_Client_ID, string sProjectID, object userState) {
            if ((this.EEP_Menu_DownloadOperationCompleted == null)) {
                this.EEP_Menu_DownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEEP_Menu_DownloadOperationCompleted);
            }
            this.InvokeAsync("EEP_Menu_Download", new object[] {
                        sEEP_Client_ID,
                        sProjectID}, this.EEP_Menu_DownloadOperationCompleted, userState);
        }
        
        private void OnEEP_Menu_DownloadOperationCompleted(object arg) {
            if ((this.EEP_Menu_DownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EEP_Menu_DownloadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TestNlog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TestNlog() {
            this.Invoke("TestNlog", new object[0]);
        }
        
        /// <remarks/>
        public void TestNlogAsync() {
            this.TestNlogAsync(null);
        }
        
        /// <remarks/>
        public void TestNlogAsync(object userState) {
            if ((this.TestNlogOperationCompleted == null)) {
                this.TestNlogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestNlogOperationCompleted);
            }
            this.InvokeAsync("TestNlog", new object[0], this.TestNlogOperationCompleted, userState);
        }
        
        private void OnTestNlogOperationCompleted(object arg) {
            if ((this.TestNlogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestNlogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatekWh", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatekWh(string sProjectID, string sEquipmentID, string sPointID, double dPointValue, System.DateTime dtRecTime) {
            this.Invoke("UpdatekWh", new object[] {
                        sProjectID,
                        sEquipmentID,
                        sPointID,
                        dPointValue,
                        dtRecTime});
        }
        
        /// <remarks/>
        public void UpdatekWhAsync(string sProjectID, string sEquipmentID, string sPointID, double dPointValue, System.DateTime dtRecTime) {
            this.UpdatekWhAsync(sProjectID, sEquipmentID, sPointID, dPointValue, dtRecTime, null);
        }
        
        /// <remarks/>
        public void UpdatekWhAsync(string sProjectID, string sEquipmentID, string sPointID, double dPointValue, System.DateTime dtRecTime, object userState) {
            if ((this.UpdatekWhOperationCompleted == null)) {
                this.UpdatekWhOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatekWhOperationCompleted);
            }
            this.InvokeAsync("UpdatekWh", new object[] {
                        sProjectID,
                        sEquipmentID,
                        sPointID,
                        dPointValue,
                        dtRecTime}, this.UpdatekWhOperationCompleted, userState);
        }
        
        private void OnUpdatekWhOperationCompleted(object arg) {
            if ((this.UpdatekWhCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatekWhCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecordingTemperature", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RecordingTemperature(string sProjectID, string[] sResult) {
            this.Invoke("RecordingTemperature", new object[] {
                        sProjectID,
                        sResult});
        }
        
        /// <remarks/>
        public void RecordingTemperatureAsync(string sProjectID, string[] sResult) {
            this.RecordingTemperatureAsync(sProjectID, sResult, null);
        }
        
        /// <remarks/>
        public void RecordingTemperatureAsync(string sProjectID, string[] sResult, object userState) {
            if ((this.RecordingTemperatureOperationCompleted == null)) {
                this.RecordingTemperatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordingTemperatureOperationCompleted);
            }
            this.InvokeAsync("RecordingTemperature", new object[] {
                        sProjectID,
                        sResult}, this.RecordingTemperatureOperationCompleted, userState);
        }
        
        private void OnRecordingTemperatureOperationCompleted(object arg) {
            if ((this.RecordingTemperatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordingTemperatureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_PointsData_MeterPara", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Get_PointsData_MeterPara(string sCompanyID, string sIP, string sPort, string sReadMode) {
            object[] results = this.Invoke("Get_PointsData_MeterPara", new object[] {
                        sCompanyID,
                        sIP,
                        sPort,
                        sReadMode});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_PointsData_MeterParaAsync(string sCompanyID, string sIP, string sPort, string sReadMode) {
            this.Get_PointsData_MeterParaAsync(sCompanyID, sIP, sPort, sReadMode, null);
        }
        
        /// <remarks/>
        public void Get_PointsData_MeterParaAsync(string sCompanyID, string sIP, string sPort, string sReadMode, object userState) {
            if ((this.Get_PointsData_MeterParaOperationCompleted == null)) {
                this.Get_PointsData_MeterParaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_PointsData_MeterParaOperationCompleted);
            }
            this.InvokeAsync("Get_PointsData_MeterPara", new object[] {
                        sCompanyID,
                        sIP,
                        sPort,
                        sReadMode}, this.Get_PointsData_MeterParaOperationCompleted, userState);
        }
        
        private void OnGet_PointsData_MeterParaOperationCompleted(object arg) {
            if ((this.Get_PointsData_MeterParaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_PointsData_MeterParaCompleted(this, new Get_PointsData_MeterParaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WrtieAdapterLogs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WrtieAdapterLogs(string sName, string sContents, System.DateTime dtTime) {
            object[] results = this.Invoke("WrtieAdapterLogs", new object[] {
                        sName,
                        sContents,
                        dtTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WrtieAdapterLogsAsync(string sName, string sContents, System.DateTime dtTime) {
            this.WrtieAdapterLogsAsync(sName, sContents, dtTime, null);
        }
        
        /// <remarks/>
        public void WrtieAdapterLogsAsync(string sName, string sContents, System.DateTime dtTime, object userState) {
            if ((this.WrtieAdapterLogsOperationCompleted == null)) {
                this.WrtieAdapterLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWrtieAdapterLogsOperationCompleted);
            }
            this.InvokeAsync("WrtieAdapterLogs", new object[] {
                        sName,
                        sContents,
                        dtTime}, this.WrtieAdapterLogsOperationCompleted, userState);
        }
        
        private void OnWrtieAdapterLogsOperationCompleted(object arg) {
            if ((this.WrtieAdapterLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WrtieAdapterLogsCompleted(this, new WrtieAdapterLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_PointsData_FTP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Get_PointsData_FTP(string sCompanyID, string sEquipmentID, string sIP, int iPort) {
            object[] results = this.Invoke("Get_PointsData_FTP", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sIP,
                        iPort});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_PointsData_FTPAsync(string sCompanyID, string sEquipmentID, string sIP, int iPort) {
            this.Get_PointsData_FTPAsync(sCompanyID, sEquipmentID, sIP, iPort, null);
        }
        
        /// <remarks/>
        public void Get_PointsData_FTPAsync(string sCompanyID, string sEquipmentID, string sIP, int iPort, object userState) {
            if ((this.Get_PointsData_FTPOperationCompleted == null)) {
                this.Get_PointsData_FTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_PointsData_FTPOperationCompleted);
            }
            this.InvokeAsync("Get_PointsData_FTP", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sIP,
                        iPort}, this.Get_PointsData_FTPOperationCompleted, userState);
        }
        
        private void OnGet_PointsData_FTPOperationCompleted(object arg) {
            if ((this.Get_PointsData_FTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_PointsData_FTPCompleted(this, new Get_PointsData_FTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_FTPParameter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Get_FTPParameter(string sCompanyID, string sEquipmentIDs) {
            object[] results = this.Invoke("Get_FTPParameter", new object[] {
                        sCompanyID,
                        sEquipmentIDs});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_FTPParameterAsync(string sCompanyID, string sEquipmentIDs) {
            this.Get_FTPParameterAsync(sCompanyID, sEquipmentIDs, null);
        }
        
        /// <remarks/>
        public void Get_FTPParameterAsync(string sCompanyID, string sEquipmentIDs, object userState) {
            if ((this.Get_FTPParameterOperationCompleted == null)) {
                this.Get_FTPParameterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_FTPParameterOperationCompleted);
            }
            this.InvokeAsync("Get_FTPParameter", new object[] {
                        sCompanyID,
                        sEquipmentIDs}, this.Get_FTPParameterOperationCompleted, userState);
        }
        
        private void OnGet_FTPParameterOperationCompleted(object arg) {
            if ((this.Get_FTPParameterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_FTPParameterCompleted(this, new Get_FTPParameterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_NewestHistoryData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Get_NewestHistoryData(string sProjectID, string sEquipmentID, string sPointID, string sFlag) {
            object[] results = this.Invoke("Get_NewestHistoryData", new object[] {
                        sProjectID,
                        sEquipmentID,
                        sPointID,
                        sFlag});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_NewestHistoryDataAsync(string sProjectID, string sEquipmentID, string sPointID, string sFlag) {
            this.Get_NewestHistoryDataAsync(sProjectID, sEquipmentID, sPointID, sFlag, null);
        }
        
        /// <remarks/>
        public void Get_NewestHistoryDataAsync(string sProjectID, string sEquipmentID, string sPointID, string sFlag, object userState) {
            if ((this.Get_NewestHistoryDataOperationCompleted == null)) {
                this.Get_NewestHistoryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_NewestHistoryDataOperationCompleted);
            }
            this.InvokeAsync("Get_NewestHistoryData", new object[] {
                        sProjectID,
                        sEquipmentID,
                        sPointID,
                        sFlag}, this.Get_NewestHistoryDataOperationCompleted, userState);
        }
        
        private void OnGet_NewestHistoryDataOperationCompleted(object arg) {
            if ((this.Get_NewestHistoryDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_NewestHistoryDataCompleted(this, new Get_NewestHistoryDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FTPOperationTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FTPOperationTime(string sCompanyID, string sEquipmentID, string sHost, System.DateTime dtOperater, string sOperate) {
            object[] results = this.Invoke("FTPOperationTime", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sHost,
                        dtOperater,
                        sOperate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FTPOperationTimeAsync(string sCompanyID, string sEquipmentID, string sHost, System.DateTime dtOperater, string sOperate) {
            this.FTPOperationTimeAsync(sCompanyID, sEquipmentID, sHost, dtOperater, sOperate, null);
        }
        
        /// <remarks/>
        public void FTPOperationTimeAsync(string sCompanyID, string sEquipmentID, string sHost, System.DateTime dtOperater, string sOperate, object userState) {
            if ((this.FTPOperationTimeOperationCompleted == null)) {
                this.FTPOperationTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFTPOperationTimeOperationCompleted);
            }
            this.InvokeAsync("FTPOperationTime", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sHost,
                        dtOperater,
                        sOperate}, this.FTPOperationTimeOperationCompleted, userState);
        }
        
        private void OnFTPOperationTimeOperationCompleted(object arg) {
            if ((this.FTPOperationTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FTPOperationTimeCompleted(this, new FTPOperationTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FTP_Rework", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] FTP_Rework(string sCompanyID, string sEquipmentID, int iSwtich, System.DateTime dtStart, System.DateTime dtEnd) {
            object[] results = this.Invoke("FTP_Rework", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        iSwtich,
                        dtStart,
                        dtEnd});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void FTP_ReworkAsync(string sCompanyID, string sEquipmentID, int iSwtich, System.DateTime dtStart, System.DateTime dtEnd) {
            this.FTP_ReworkAsync(sCompanyID, sEquipmentID, iSwtich, dtStart, dtEnd, null);
        }
        
        /// <remarks/>
        public void FTP_ReworkAsync(string sCompanyID, string sEquipmentID, int iSwtich, System.DateTime dtStart, System.DateTime dtEnd, object userState) {
            if ((this.FTP_ReworkOperationCompleted == null)) {
                this.FTP_ReworkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFTP_ReworkOperationCompleted);
            }
            this.InvokeAsync("FTP_Rework", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        iSwtich,
                        dtStart,
                        dtEnd}, this.FTP_ReworkOperationCompleted, userState);
        }
        
        private void OnFTP_ReworkOperationCompleted(object arg) {
            if ((this.FTP_ReworkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FTP_ReworkCompleted(this, new FTP_ReworkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update_EquipmentsState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Update_EquipmentsState(string sCompanyID, string sEquipmentID, string sIP, int iPort, System.DateTime dtUpdate) {
            object[] results = this.Invoke("Update_EquipmentsState", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sIP,
                        iPort,
                        dtUpdate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Update_EquipmentsStateAsync(string sCompanyID, string sEquipmentID, string sIP, int iPort, System.DateTime dtUpdate) {
            this.Update_EquipmentsStateAsync(sCompanyID, sEquipmentID, sIP, iPort, dtUpdate, null);
        }
        
        /// <remarks/>
        public void Update_EquipmentsStateAsync(string sCompanyID, string sEquipmentID, string sIP, int iPort, System.DateTime dtUpdate, object userState) {
            if ((this.Update_EquipmentsStateOperationCompleted == null)) {
                this.Update_EquipmentsStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate_EquipmentsStateOperationCompleted);
            }
            this.InvokeAsync("Update_EquipmentsState", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sIP,
                        iPort,
                        dtUpdate}, this.Update_EquipmentsStateOperationCompleted, userState);
        }
        
        private void OnUpdate_EquipmentsStateOperationCompleted(object arg) {
            if ((this.Update_EquipmentsStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update_EquipmentsStateCompleted(this, new Update_EquipmentsStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get_Equipments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Get_Equipments(string sCompanyID, string sEquipmentIDs) {
            object[] results = this.Invoke("Get_Equipments", new object[] {
                        sCompanyID,
                        sEquipmentIDs});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void Get_EquipmentsAsync(string sCompanyID, string sEquipmentIDs) {
            this.Get_EquipmentsAsync(sCompanyID, sEquipmentIDs, null);
        }
        
        /// <remarks/>
        public void Get_EquipmentsAsync(string sCompanyID, string sEquipmentIDs, object userState) {
            if ((this.Get_EquipmentsOperationCompleted == null)) {
                this.Get_EquipmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_EquipmentsOperationCompleted);
            }
            this.InvokeAsync("Get_Equipments", new object[] {
                        sCompanyID,
                        sEquipmentIDs}, this.Get_EquipmentsOperationCompleted, userState);
        }
        
        private void OnGet_EquipmentsOperationCompleted(object arg) {
            if ((this.Get_EquipmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_EquipmentsCompleted(this, new Get_EquipmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Set_SumTags", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Set_SumTags(System.DateTime Date, string sProjectID) {
            object[] results = this.Invoke("Set_SumTags", new object[] {
                        Date,
                        sProjectID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Set_SumTagsAsync(System.DateTime Date, string sProjectID) {
            this.Set_SumTagsAsync(Date, sProjectID, null);
        }
        
        /// <remarks/>
        public void Set_SumTagsAsync(System.DateTime Date, string sProjectID, object userState) {
            if ((this.Set_SumTagsOperationCompleted == null)) {
                this.Set_SumTagsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSet_SumTagsOperationCompleted);
            }
            this.InvokeAsync("Set_SumTags", new object[] {
                        Date,
                        sProjectID}, this.Set_SumTagsOperationCompleted, userState);
        }
        
        private void OnSet_SumTagsOperationCompleted(object arg) {
            if ((this.Set_SumTagsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Set_SumTagsCompleted(this, new Set_SumTagsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Set_AlarmOccur", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Set_AlarmOccur(string sCompanyID, string sEquipmentID, string sPointID, string sAlarmID, System.DateTime dtRecTime) {
            object[] results = this.Invoke("Set_AlarmOccur", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sPointID,
                        sAlarmID,
                        dtRecTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Set_AlarmOccurAsync(string sCompanyID, string sEquipmentID, string sPointID, string sAlarmID, System.DateTime dtRecTime) {
            this.Set_AlarmOccurAsync(sCompanyID, sEquipmentID, sPointID, sAlarmID, dtRecTime, null);
        }
        
        /// <remarks/>
        public void Set_AlarmOccurAsync(string sCompanyID, string sEquipmentID, string sPointID, string sAlarmID, System.DateTime dtRecTime, object userState) {
            if ((this.Set_AlarmOccurOperationCompleted == null)) {
                this.Set_AlarmOccurOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSet_AlarmOccurOperationCompleted);
            }
            this.InvokeAsync("Set_AlarmOccur", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sPointID,
                        sAlarmID,
                        dtRecTime}, this.Set_AlarmOccurOperationCompleted, userState);
        }
        
        private void OnSet_AlarmOccurOperationCompleted(object arg) {
            if ((this.Set_AlarmOccurCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Set_AlarmOccurCompleted(this, new Set_AlarmOccurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Del_AlarmOccur", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Del_AlarmOccur(string sCompanyID, string sEquipmentID, string sPointID, string sAlarmID, System.DateTime dtRecTime) {
            object[] results = this.Invoke("Del_AlarmOccur", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sPointID,
                        sAlarmID,
                        dtRecTime});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Del_AlarmOccurAsync(string sCompanyID, string sEquipmentID, string sPointID, string sAlarmID, System.DateTime dtRecTime) {
            this.Del_AlarmOccurAsync(sCompanyID, sEquipmentID, sPointID, sAlarmID, dtRecTime, null);
        }
        
        /// <remarks/>
        public void Del_AlarmOccurAsync(string sCompanyID, string sEquipmentID, string sPointID, string sAlarmID, System.DateTime dtRecTime, object userState) {
            if ((this.Del_AlarmOccurOperationCompleted == null)) {
                this.Del_AlarmOccurOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDel_AlarmOccurOperationCompleted);
            }
            this.InvokeAsync("Del_AlarmOccur", new object[] {
                        sCompanyID,
                        sEquipmentID,
                        sPointID,
                        sAlarmID,
                        dtRecTime}, this.Del_AlarmOccurOperationCompleted, userState);
        }
        
        private void OnDel_AlarmOccurOperationCompleted(object arg) {
            if ((this.Del_AlarmOccurCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Del_AlarmOccurCompleted(this, new Del_AlarmOccurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Set_PointValueToHistoryTableCompletedEventHandler(object sender, Set_PointValueToHistoryTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Set_PointValueToHistoryTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Set_PointValueToHistoryTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Set_PointValueToRealTimeTableCompletedEventHandler(object sender, Set_PointValueToRealTimeTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Set_PointValueToRealTimeTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Set_PointValueToRealTimeTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void TransformRealToHistoryCompletedEventHandler(object sender, TransformRealToHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransformRealToHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TransformRealToHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_PointsData_ModbusRTUCompletedEventHandler(object sender, Get_PointsData_ModbusRTUCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_PointsData_ModbusRTUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_PointsData_ModbusRTUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_PointsData_ModbusTCPCompletedEventHandler(object sender, Get_PointsData_ModbusTCPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_PointsData_ModbusTCPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_PointsData_ModbusTCPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_PointsData_OPCCompletedEventHandler(object sender, Get_PointsData_OPCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_PointsData_OPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_PointsData_OPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void EEP_Points_DownloadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void EEP_Points_UploadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Insert_AdapterControlCompletedEventHandler(object sender, Insert_AdapterControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_AdapterControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_AdapterControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void EEP_AdapterStateCompletedEventHandler(object sender, EEP_AdapterStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EEP_AdapterStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EEP_AdapterStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void EEP_Menu_DownloadCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void TestNlogCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void UpdatekWhCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void RecordingTemperatureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_PointsData_MeterParaCompletedEventHandler(object sender, Get_PointsData_MeterParaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_PointsData_MeterParaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_PointsData_MeterParaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void WrtieAdapterLogsCompletedEventHandler(object sender, WrtieAdapterLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WrtieAdapterLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WrtieAdapterLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_PointsData_FTPCompletedEventHandler(object sender, Get_PointsData_FTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_PointsData_FTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_PointsData_FTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_FTPParameterCompletedEventHandler(object sender, Get_FTPParameterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_FTPParameterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_FTPParameterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_NewestHistoryDataCompletedEventHandler(object sender, Get_NewestHistoryDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_NewestHistoryDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_NewestHistoryDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void FTPOperationTimeCompletedEventHandler(object sender, FTPOperationTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FTPOperationTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FTPOperationTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void FTP_ReworkCompletedEventHandler(object sender, FTP_ReworkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FTP_ReworkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FTP_ReworkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Update_EquipmentsStateCompletedEventHandler(object sender, Update_EquipmentsStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update_EquipmentsStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update_EquipmentsStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Get_EquipmentsCompletedEventHandler(object sender, Get_EquipmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_EquipmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_EquipmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Set_SumTagsCompletedEventHandler(object sender, Set_SumTagsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Set_SumTagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Set_SumTagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Set_AlarmOccurCompletedEventHandler(object sender, Set_AlarmOccurCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Set_AlarmOccurCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Set_AlarmOccurCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    public delegate void Del_AlarmOccurCompletedEventHandler(object sender, Del_AlarmOccurCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.19408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Del_AlarmOccurCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Del_AlarmOccurCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591